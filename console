#!/bin/bash
. $(pwd)"/.env"

# color define
CommandColor='\033[32m'
NoColor='\033[0m'
TitleColor='\033[1;33m'

function help {
  echo -e "${TitleColor}Docker for laravel${NoColor}"
  echo -e ""
  echo -e "${TitleColor}Usage:${NoColor}"
  echo -e "  ${CommandColor} command ${NoColor}[arguments]${NoColor}"
  echo -e ""
  echo -e "${TitleColor}Options:${NoColor}"
  echo -e "  ${CommandColor}-h, --help${NoColor}        Display this help message"
  echo -e ""
  echo -e "${TitleColor}Available commands:${NoColor}"
  echo -e "${CommandColor}  build             ${NoColor}Build container image"
  echo -e "${CommandColor}  start             ${NoColor}Start container"
  echo -e "${CommandColor}  stop              ${NoColor}Stop container"
  echo -e "${CommandColor}  restart           ${NoColor}Restart service container and service"
  echo -e "${CommandColor}  exec              ${NoColor}Connect to container [${DOCKER_NAME}]"
  echo -e "${CommandColor}  logs              ${NoColor}Tail service log [nginx access / (error), redis / (default laravel)]"
  echo -e "${CommandColor}  db                ${NoColor}Connect to database"
  echo -e "${CommandColor}  redis             ${NoColor}Connect to redis-cli [cli command]"
  echo -e "${CommandColor}  rm                ${NoColor}Remove container [-f]"
  echo -e "${CommandColor}  ps                ${NoColor}Docker ps [-a]"
  echo -e "${CommandColor}  clear             ${NoColor}Remove container and images"
  echo -e "${CommandColor}  reload            ${NoColor}Reload nginx *.conf and php *.ini"
  echo -e "${CommandColor}  alias             ${NoColor}Register alias"
  echo -e "${CommandColor}  console           ${NoColor}Start container / if started will be exec to ${DOCKER_NAME} container"
}

# remove container
if [ "${1}" == "rm" ]; then
    if [ "${2}" == "-f" ]; then
        SH=$(docker rm -f ${DOCKER_NAME})
    else
        SH=$(docker rm ${DOCKER_NAME})
    fi

    rm -rf "$(pwd)/storage/docker/default.conf"
    rm -rf "$(pwd)/storage/docker/xdebug.ini"
    #if [ ! -z ${DOCKER_PROXY_NAME} ]; then
    #    SH=$(docker rm ${DOCKER_PROXY_NAME} ${2})
    #fi

    SERVICE_IS_RUNNING=$(docker inspect --format="{{ .State.Running }}" ${DOCKER_NAME} 2> /dev/null)

    if [ "${SERVICE_IS_RUNNING}" == "" ]; then
        echo -e "${CommandColor}Container Removed!${NoColor}"
    fi
    exit
fi

# force remove container and images
if [ "${1}" == "clear" ]; then
    echo -e "${CommandColor}Do You want stop / remove ${DOCKER_NAME} container?(y/n)${NoColor}"
    read ans
    if [ ${ans} = 'n' ]; then
        exit
    else
        SH=$(docker rm ${DOCKER_NAME} -f)
        SH=$(docker rmi ${DOCKER_IMAGE} -f)
        #if [ ! -z ${DOCKER_PROXY_NAME} ]; then
        #    SH=$(docker rm ${DOCKER_PROXY_NAME} -f)
        #    SH=$(docker rmi ${DOCKER_PROXY_NAME} jwilder/nginx-proxy:latest centos:6 -f)
        #fi
        echo -e "${CommandColor}Container and Images Removed!${NoColor}"
    fi
    exit
fi

# stop container(s)
if [ "${1}" == "stop" ]; then
    #if [ ! -z ${DOCKER_PROXY_NAME} ]; then
    #    SH=$(docker stop ${DOCKER_PROXY_NAME})
    #fi

    SH=$(docker stop ${DOCKER_NAME})
    echo -e "${CommandColor}Container Stopped!${NoColor}"
exit
fi

# same to docker ps
if [ "${1}" == "ps" ]; then
    docker ps ${2}
exit
fi

# register alias
if [ "${1}" == "alias" ]; then
    echo -e "${CommandColor} Input Alias Key! [enter to exit]${NoColor}"
    read answer
    if [ ! -z ${answer} ]; then
        echo "alias ${answer}='./console'" >> ~/.bash_profile
        echo -e "${CommandColor}NOTICE::copy and paste to command line [ source ~/.bash_profile ] and run it!${NoColor}"
        exit
    else
        echo -e "${CommandColor}Canceled!${NoColor}"
        exit
    fi
exit
fi

# reload default.conf and xdebug.ini
if [ "${1}" == "reload" ]; then
    cp "$(pwd)/storage/docker/default.example.conf" "$(pwd)/storage/docker/default.conf"
    cp "$(pwd)/storage/docker/xdebug.example.ini" "$(pwd)/storage/docker/xdebug.ini"
    if [ "${APP_ENV}" == "local" ]; then
        IP=$(ipconfig getifaddr en0)
        SH=$(echo "xdebug.remote_host=${IP}" >> "$(pwd)/storage/docker/xdebug.ini")
    fi
    SH=$(docker exec -it ${DOCKER_NAME} service nginx reload);
    SH=$(docker exec -it ${DOCKER_NAME} service php7.1-fpm restart);
    echo -e "${CommandColor}Config Reloaded!${NoColor}"
exit
fi

# restart container(s) and service
if [ "${1}" == "restart" ]; then
    if [ ! -z ${DOCKER_PROXY_NAME} ]; then
        SH=$(docker restart ${DOCKER_PROXY_NAME})
    fi

    SH=$(docker restart ${DOCKER_NAME})
    CONTAINER_IP="$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${DOCKER_NAME})"
    echo -e "${CommandColor}Container Restarted!${NoColor}"
    exit
fi

# start container(s) and service
if [ "${1}" == "start" ]; then

    if [ -z ${DEFAULT_DOMAIN} ]; then
        echo 'NOTICE::Defend in .env file DEFAULT_DOMAIN parameter first and retry. ex) DEFAULT_DOMAIN=example.local'
        exit
    fi

    SERVICE_IS_RUNNING=$(docker inspect --format="{{ .State.Running }}" ${DOCKER_NAME} 2> /dev/null)

    if [ ! -z ${DOCKER_PROXY_NAME} ]; then
        PROXY_IS_RUNNING=$(docker inspect --format="{{ .State.Running }}" ${DOCKER_PROXY_NAME} 2> /dev/null)
        if [ "${PROXY_IS_RUNNING}" == "false" ]; then
            SH=$(docker start ${DOCKER_PROXY_NAME})
        fi

        if [ "${PROXY_IS_RUNNING}" == "" ]; then
            SH=$(docker run -d -p 80:80 -v /var/run/docker.sock:/tmp/docker.sock:ro --name ${DOCKER_PROXY_NAME} jwilder/nginx-proxy:latest)
            echo -e "${CommandColor}::Proxy Running::${NoColor}"
            echo ""
        fi
    fi

    if [ "${SERVICE_IS_RUNNING}" == "" ]; then
        cp "$(pwd)/storage/docker/default.example.conf" "$(pwd)/storage/docker/default.conf"
        cp "$(pwd)/storage/docker/xdebug.example.ini" "$(pwd)/storage/docker/xdebug.ini"
        if [ "${APP_ENV}" != "dev" ]; then
            IP=$(ipconfig getifaddr en0)
            SH=$(echo "xdebug.remote_host=${IP}" >> "$(pwd)/storage/docker/xdebug.ini")
        fi

        if [ "${APP_DEBUG}" == "true" ]; then
            SH=$(docker run -dti -e TZ=Asia/Seoul -e VIRTUAL_HOST=${DEFAULT_DOMAIN} --privileged=true --expose 80 --expose 9001 -p "3306${DOCKER_PROJECT_NUM}":3306 -p "6379${DOCKER_PROJECT_NUM}":6379 -v $(pwd):/www -v "$(pwd)/storage/docker/default.conf":/etc/nginx/sites-available/default -v "$(pwd)/storage/docker/xdebug.ini":/etc/php/7.2/fpm/conf.d/20-xdebug.ini -v "$(pwd)/storage/docker/xdebug.ini":/etc/php/7.2/cli/conf.d/20-xdebug.ini -v "$(pwd)/storage/docker/startup.sh":/opt/bin/startup.sh --name ${DOCKER_NAME} ${DOCKER_IMAGE})
        else
            SH=$(docker run -dti -e TZ=Asia/Seoul -e VIRTUAL_HOST=${DEFAULT_DOMAIN} --privileged=true --expose 80 -p "3306${DOCKER_PROJECT_NUM}":3306 -p "6379${DOCKER_PROJECT_NUM}":6379 -v $(pwd):/www -v "$(pwd)/storage/docker/default.conf":/etc/nginx/sites-available/default -v "$(pwd)/storage/docker/startup.sh":/opt/bin/startup.sh --name ${DOCKER_NAME} ${DOCKER_IMAGE})
        fi

        echo -e "${CommandColor}::Host Info::${NoColor}"
        echo -e "${CommandColor}Host: http://${DEFAULT_DOMAIN}${NoColor}"
        echo ""
        echo -e "${CommandColor}::Database Info::${NoColor}"
        echo -e "${CommandColor}DB Name: ${DB_DATABASE}${NoColor}"
        echo -e "${CommandColor}DB Port: 3306${DOCKER_PROJECT_NUM}${NoColor}"
        echo -e "${CommandColor}DB User: ${DB_USERNAME}${NoColor}"
        echo -e "${CommandColor}DB PWD: ${DB_PASSWORD}${NoColor}"
        echo ""
        if [ "${APP_ENV}" != "dev" ]; then
            echo -e "${CommandColor}DB XDEBUG PORT: 9001${NoColor}"
        fi
        echo -e "${CommandColor}DB REDIS PORT: "6379${DOCKER_PROJECT_NUM}"${NoColor}"
        CONTAINER_IP="$(docker inspect --format '{{ .NetworkSettings.IPAddress }}' ${DOCKER_NAME})"
        echo -e "${CommandColor}DB CONTAINER IP: "${CONTAINER_IP}"${NoColor}"
        echo ""
        echo -e "${CommandColor}Container Created!${NoColor}"
        exit
    fi

    if [ "${SERVICE_IS_RUNNING}" == "false" ]; then
        SH=$(docker start ${DOCKER_NAME})
        echo -e "${CommandColor}Container Started!${NoColor}"
        exit;
    fi
fi

# connect to container
if [ "${1}" == "exec" ]; then
    if [ "${2}" == "" ]; then
        help
        exit
    fi

    docker exec -it ${2} bash
    exit
fi

# connect to docker database
if [ "${1}" == "db" ]; then
    if [ "${2}" == "create" ]; then
        SH=$(docker exec -it ${DOCKER_NAME} mysql -s -e "CREATE DATABASE ${DB_DATABASE} CHARACTER SET = 'utf8' COLLATE = 'utf8_general_ci';")
        SH=$(docker exec -it ${DOCKER_NAME} mysql -s -e "CREATE USER '${DB_USERNAME}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';")
        SH=$(docker exec -it ${DOCKER_NAME} mysql -s -e "GRANT ALL PRIVILEGES ON *.* TO '${DB_USERNAME}'@'localhost' IDENTIFIED BY '${DB_PASSWORD}';")
        SH=$(docker exec -it ${DOCKER_NAME} mysql -s -e "GRANT ALL PRIVILEGES ON *.* TO '${DB_USERNAME}'@'%' IDENTIFIED BY '${DB_PASSWORD}';")
        SH=$(docker exec -it ${DOCKER_NAME} mysql -s -e "FLUSH PRIVILEGES;")
    fi
    docker exec -it ${DOCKER_NAME} mysql -u ${DB_USERNAME} -p${DB_PASSWORD} ${DB_DATABASE}
exit
fi

# connect to docker redis-cli
if [ "${1}" == "redis" ]; then
    if [ "${REDIS_HOST}" == "127.0.0.1" ] || [ "${REDIS_HOST}" == "localhost" ]; then
        docker exec -it ${DOCKER_NAME} redis-cli ${2} ${3}
    else
        docker exec -it ${DOCKER_NAME} redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT} ${2} ${3}
    fi
exit
fi

# view log
if [ "${1}" == "logs" ]; then
    if [ "${2}" == "" ] || [ "${2}" == "laravel" ]; then
        docker exec -it ${DOCKER_NAME} tail -f /www/storage/logs/laravel.log
        exit
    fi

    if [ "${2}" == "nginx" ]; then
        if [ "${3}" == "access" ] || [ "${3}" == "" ]; then
            docker exec -it ${DOCKER_NAME} tail -f /var/log/nginx/access.log
            exit
        fi
        docker exec -it ${DOCKER_NAME} tail -f /var/log/nginx/error.log
        exit
    fi

    if [ "${2}" == "redis" ]; then
        if [ "${REDIS_HOST}" == "127.0.0.1" ] || [ "${REDIS_HOST}" == "localhost" ]; then
            docker exec -it ${DOCKER_NAME} redis-cli monitor
        else
            docker exec -it ${DOCKER_NAME} redis-cli -h ${REDIS_HOST} -p ${REDIS_PORT} monitor
        fi
        exit
    fi
exit
fi

# build container image
if [ "${1}" == "build" ]; then
    docker build -t ${DOCKER_IMAGE} -f "$(pwd)/storage/docker/Dockerfile" .
exit
fi

# helper
if [ "${1}" == "-H" ] || [ "${1}" == "--help" ]; then
    help
    exit
fi

if [ "${1}" == "" ]; then
        # check container is running
        IS_RUNNING=$(docker inspect --format="{{ .State.Running }}" ${DOCKER_NAME} 2> /dev/null)

        if [ "${IS_RUNNING}" == "true" ]; then
            ./console exec ${DOCKER_NAME}
        fi

        if [ "${IS_RUNNING}" == "" ]; then
            ./console start
        fi

        if [ "${IS_RUNNING}" == "false" ]; then
            ./console start
        fi
else
    help
fi
exit
